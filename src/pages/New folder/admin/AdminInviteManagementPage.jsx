import React, { useState, useEffect, useCallback } from 'react';
import * as adminService from "../../services/adminService.js";

const AdminInviteManagementPage = () => {
  const [invites, setInvites] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [filters, setFilters] = useState({ status: '', roleToInvite: '', search: '', page: 1, limit: 10 });
  const [totalPages, setTotalPages] = useState(1);

  const fetchInvites = useCallback(async () => {
    try {
      setLoading(true);
      const response = await adminService.listAllInvitesAdmin(filters);
      setInvites(response.data.invites);
      setTotalPages(response.data.totalPages);
      setError('');
    } catch (err) {
      setError('Failed to load invites. ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  }, [filters]);

  useEffect(() => {
    fetchInvites();
  }, [fetchInvites]);

  const handleFilterChange = (e) => {
    setFilters(prev => ({ ...prev, [e.target.name]: e.target.value, page: 1 }));
  };

  const handlePageChange = (newPage) => {
    setFilters(prev => ({ ...prev, page: newPage }));
  };

  const handleResendInvite = async (inviteId) => {
    if (!window.confirm("Are you sure you want to resend this invite?")) return;
    try {
      await adminService.resendInviteAdmin(inviteId);
      alert('Invite resent successfully!');
      // Optionally, you might want to update the specific invite in the list or refetch
    } catch (err) {
      alert('Failed to resend invite: ' + (err.response?.data?.message || err.message));
    }
  };

  const handleRevokeInvite = async (inviteId) => {
    if (!window.confirm("Are you sure you want to revoke this invite?")) return;
    try {
      await adminService.revokeInviteAdmin(inviteId);
      alert('Invite revoked successfully!');
      fetchInvites(); // Refresh the list
    } catch (err) {
      alert('Failed to revoke invite: ' + (err.response?.data?.message || err.message));
    }
  };

  if (loading) return <div className="text-center p-10">Loading invites...</div>;
  if (error) return <div className="text-center p-10 text-red-500">{error}</div>;

  return (
    <div className="container mx-auto p-4">
      <h2 className="text-2xl font-semibold text-gray-800 mb-6">Invite Management (Admin View)</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 p-4 bg-gray-50 rounded-lg shadow">
        <input
          type="text"
          name="search"
          placeholder="Search by email"
          value={filters.search}
          onChange={handleFilterChange}
          className="p-2 border rounded w-full"
        />
        <select name="status" value={filters.status} onChange={handleFilterChange} className="p-2 border rounded w-full">
          <option value="">All Statuses</option>
          <option value="Pending">Pending</option>
          <option value="Accepted">Accepted</option>
          <option value="Expired">Expired</option>
          <option value="Revoked">Revoked</option>
        </select>
        <select name="roleToInvite" value={filters.roleToInvite} onChange={handleFilterChange} className="p-2 border rounded w-full">
          <option value="">All Roles</option>
          <option value="Tenant">Tenant</option>
          <option value="Landlord">Landlord</option>
          <option value="PropertyManager">PropertyManager</option>
        </select>
      </div>

      <div className="bg-white shadow-md rounded-lg overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Email</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Role Invited</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Generated By</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Property</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Expires At</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {invites.map(invite => (
              <tr key={invite._id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{invite.email}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{invite.roleToInvite}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                   <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                     invite.status === 'Accepted' ? 'bg-green-100 text-green-800' :
                     invite.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
                     'bg-red-100 text-red-800'
                   }`}>
                    {invite.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{invite.generatedBy?.name || 'N/A'}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{invite.property?.name || 'N/A'}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{new Date(invite.expiresAt).toLocaleString()}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                  {invite.status === 'Pending' && new Date(invite.expiresAt) > new Date() && (
                    <>
                      <button onClick={() => handleResendInvite(invite._id)} className="text-blue-600 hover:text-blue-900">Resend</button>
                      <button onClick={() => handleRevokeInvite(invite._id)} className="text-red-600 hover:text-red-900">Revoke</button>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
       {/* Pagination */}
       <div className="mt-4 flex justify-between items-center">
        <button onClick={() => handlePageChange(filters.page - 1)} disabled={filters.page <= 1} className="px-4 py-2 bg-gray-300 rounded disabled:opacity-50">Previous</button>
        <span>Page {filters.page} of {totalPages}</span>
        <button onClick={() => handlePageChange(filters.page + 1)} disabled={filters.page >= totalPages} className="px-4 py-2 bg-gray-300 rounded disabled:opacity-50">Next</button>
      </div>
    </div>
  );
};

export default AdminInviteManagementPage;